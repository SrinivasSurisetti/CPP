#include <iostream>
using namespace std;
// Abstract Class
class Shape
{
public:
 // Pure virtual function - to be implemented by derived classes
 virtual float calculateArea() = 0;
 // Concrete method in abstract class
 void display()
 {
 cout << "Inside Abstract Class - Shape" << endl;
 }
};
// Derived class implementing Shape
class Circle : public Shape
{
private:
 float radius;
public:
 Circle(float r) : radius(r) {}
 // Implementing calculateArea() for Circle
 float calculateArea() override
 {
 return 3.14 * radius * radius;
 }
};
int main() {
 // Shape shape; // Error: Cannot instantiate abstract class Shape
 Circle circle(5);
 cout << "Area of Circle: " << circle.calculateArea() << endl;
 circle.display(); // Accessing concrete method from the abstract class
 return 0;
}
