#include <iostream>
#include <vector>
#include <list>

class Pair {
public:
    int first;   // Represents the vertex
    int second;  // Represents the weight

    // Constructor
    Pair(int first, int second) : first(first), second(second) {}
};

class Graph {
    int V; // Number of vertices
    std::vector<std::list<Pair>> adjList; // Adjacency list

public:
    // Constructor
    Graph(int V) : V(V), adjList(V) {}

    // Method to add an edge to the graph
    void addEdge(int src, int dest, int weight) {
        adjList[src].push_back(Pair(dest, weight));
        // If the graph is undirected, add the reverse edge
        adjList[dest].push_back(Pair(src, weight));
    }

    // Method to print the graph
    void printGraph() {
        for (int i = 0; i < V; ++i) {
            std::cout << "Vertex " << i << ":";
            for (const auto& edge : adjList[i]) {
                std::cout << " -> (" << edge.first << ", " << edge.second << ")";
            }
            std::cout << std::endl;
        }
    }
};

int main() {
    Graph graph(5); // Create a graph with 5 vertices

    graph.addEdge(0, 1, 2);
    graph.addEdge(0, 4, 9);
    graph.addEdge(1, 2, 3);
    graph.addEdge(1, 3, 7);
    graph.addEdge(1, 4, 6);
    graph.addEdge(2, 3, 4);
    graph.addEdge(3, 4, 5);

    graph.printGraph();

    return 0;
}

/*
Vertex 0: -> (1, 2) -> (4, 9)
Vertex 1: -> (0, 2) -> (2, 3) -> (3, 7) -> (4, 6)
Vertex 2: -> (1, 3) -> (3, 4)
Vertex 3: -> (1, 7) -> (2, 4) -> (4, 5)
Vertex 4: -> (0, 9) -> (1, 6) -> (3, 5)
*/
